# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]

    env:
      Solution_Name: RH_GRH.sln
      Project_Path: RH_GRH\RH_GRH.csproj
      Configuration: ${{ matrix.configuration }}

        steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with: { dotnet-version: '8.0.x' }

      # RESTORE legacy (packages.config) si présent
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: NuGet restore (legacy)
        run: nuget restore RH_GRH.sln -NonInteractive -Source https://api.nuget.org/v3/index.json

      # RESTORE moderne (PackageReference) – sans risque
      - name: dotnet restore
        run: dotnet restore RH_GRH.sln

      - name: Build
        run: dotnet build RH_GRH.sln --configuration Release --no-restore

      - name: Build
        run: dotnet build $env:Solution_Name --configuration $env:Configuration --no-restore

      - name: Publish (only Release)
        if: ${{ matrix.configuration == 'Release' }}
        run: dotnet publish $env:Project_Path -c Release -r win-x64 --self-contained false -o publish/win-x64

      - name: Upload artifacts
        if: ${{ matrix.configuration == 'Release' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: publish/win-x64

